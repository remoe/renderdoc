name: CI

on:
  push:
    branches:
      - v1.x
      - ci-test
  pull_request:
    branches:
      - v1.x

defaults:
  run:
    shell: bash

jobs:
  commit-msg:
    name: Commit message check
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - name: Check commit messages
      run: |
        if git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep -q '.\{73\}'; then
          (echo -n "::error::";
           echo "Some commit message summary lines are too long. See CONTRIBUTING.md for more information.";
           echo "Invalid commits:";
           echo;
           git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep '.\{73\}';) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        fi
  clang-format:
    name: Code formatting check
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 5
    - name: Add LLVM apt repository
      run: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main'
    - name: Install clang-format-3.8
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang-format-3.8 
    - name: Run clang-format-3.8
      run: |
        . ./util/clang_format_all.sh
        git clean -f
    - name: Check formatting
      run: |
        git diff --quiet || (
          (echo -n "::error::";
          echo "clang-format issues were found. See CONTRIBUTING.md for more information.";
          echo;
          git diff;) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        )
  macOS:
    name: Mac
    needs: [commit-msg, clang-format]
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        name: [ Development, Release ]
        include:
          - name: Development
            type: Debug
          - name: Release
            type: Release
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 5
    - name: Install Homebrew dependencies
      run: |
        brew update || true
        brew install qt5 lftp automake
        brew link qt5 --force
    - name: Build
      run: |
        mkdir build
        pushd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} ..
        make -j2
        popd
    - if: matrix.type == 'Debug'
      name: Run core unit tests
      run: |
        if ! ./build/bin/renderdoccmd test unit -o test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e $'s#\x01#%0A#g';
          exit 1;
        fi
    - if: matrix.type == 'Debug'
      name: Run UI unit tests
      run: |
        if ! ./build/bin/qrenderdoc.app/Contents/MacOS/qrenderdoc --unittest test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e $'s#\x01#%0A#g';
          exit 1;
        fi
    - if: matrix.type == 'Release' && github.event_name == 'push'
      name: Preparing for deploy
      run: ./util/buildscripts/scripts/prepare_deps_macos.sh ./build/bin/qrenderdoc.app/Contents/MacOS/qrenderdoc
    - if: matrix.type == 'Release' && github.event_name == 'push'
      name: Packaging artifacts for nightly build
      run: |
        FNAME="RenderDoc_macOS_"`git rev-parse HEAD`.zip
        zip -r "${FNAME}" build/bin
        ls -lh "${FNAME}"
        echo "FNAME=$FNAME" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${FNAME}
        asset_name: ${FNAME}
        asset_content_type: application/zip        
